package task08;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class AnimationControl extends JDialog {
    private JPanel contentPane;
    private JButton buttonStop;
    private JSlider sliderAnimationSpeed;
    private JSlider sliderSeek;
    private JButton buttonPause;
    private JButton buttonForward;
    private JButton buttonRewind;
    private boolean isPaused = false;
    private boolean isAutoSeek = false;

    public AnimationControl(ActionListener actionListener, int framesCount, int animationSpeed, JComponent parent) {
        setContentPane(contentPane);
        setModal(true);
        setTitle("Управление анимацией");
        getRootPane().setDefaultButton(buttonStop);
        sliderSeek.setMinimum(1);
        sliderSeek.setMaximum(framesCount);
        sliderSeek.setValue(1);
//        sliderAnimationSpeed.setMinimum(1);
//        sliderAnimationSpeed.setMaximum(10);
        sliderAnimationSpeed.setValue(animationSpeed);


        buttonStop.addActionListener(e -> {
            buttonStop.setEnabled(false);
            //buttonPause.setEnabled(false);
            //buttonForward.setEnabled(false);
            //buttonRewind.setEnabled(false);
            isPaused = true;
            buttonPause.setText("Старт");
            actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "stop"));
        });
        buttonPause.addActionListener(e -> {
            isPaused = !isPaused;
            buttonStop.setEnabled(true);
            buttonPause.setText(isPaused ? "Старт" : "Пауза");
            actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, isPaused ? "pause" : "resume"));
        });
        buttonForward.addActionListener(e -> {
            actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "forward"));
        });
        buttonRewind.addActionListener(e -> {
            actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "rewind"));
        });


        sliderAnimationSpeed.addChangeListener(e -> {
            int speed = sliderAnimationSpeed.getValue();
            actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "speed:" + speed));

        });
        sliderSeek.addChangeListener(e -> {
            if (isAutoSeek) {
                isAutoSeek = false;
                return;
            }
            int frame = sliderSeek.getValue();
            actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "seek:" + frame));
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "hardStop"));
            }
        });
        this.pack();
        this.setLocationRelativeTo(parent);
    }

    public void updateSeekSlider(int i) {
        isAutoSeek = true;
        sliderSeek.setValue(i);
    }

    public void setState(boolean isEnd) {
        if (isEnd) {
            buttonStop.setEnabled(false);
            isPaused = true;
            buttonPause.setText("Старт");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Скорость анимации:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Перемотка:");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        sliderAnimationSpeed = new JSlider();
        sliderAnimationSpeed.setMaximum(10);
        sliderAnimationSpeed.setMinimum(1);
        panel2.add(sliderAnimationSpeed, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sliderSeek = new JSlider();
        panel2.add(sliderSeek, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonStop = new JButton();
        buttonStop.setText("Стоп");
        panel3.add(buttonStop, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonPause = new JButton();
        buttonPause.setText("Пауза");
        panel3.add(buttonPause, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonForward = new JButton();
        buttonForward.setText("Вперёд >>");
        panel3.add(buttonForward, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonRewind = new JButton();
        buttonRewind.setText("<< Назад");
        panel3.add(buttonRewind, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
